#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
B√ÅO C√ÅO KI·ªÇM TRA Y√äU C·∫¶U SO V·ªöI HI·ªÜN TR·∫†NG
Ph√¢n t√≠ch c√°c n·ªôi dung ch∆∞a ƒë√∫ng ho·∫∑c thi·∫øu s√≥t theo TT 05/2025/TT-BNV
"""

import os
import xml.etree.ElementTree as ET

def analyze_package_structure():
    """Ph√¢n t√≠ch c·∫•u tr√∫c package so v·ªõi y√™u c·∫ßu"""
    output_dir = "data/output"
    
    print("üîç B√ÅO C√ÅO KI·ªÇM TRA Y√äU C·∫¶U AIP_HOSO")
    print("=" * 70)
    print()
    
    # Get newest package
    packages = []
    for item in os.listdir(output_dir):
        if item.startswith('urn_uuid_') and os.path.isdir(os.path.join(output_dir, item)):
            packages.append(item)
    
    if not packages:
        print("‚ùå Kh√¥ng t√¨m th·∫•y package n√†o ƒë·ªÉ ki·ªÉm tra")
        return
    
    packages.sort(key=lambda x: os.path.getmtime(os.path.join(output_dir, x)))
    latest_package = packages[-1]
    package_path = os.path.join(output_dir, latest_package)
    
    print(f"üì¶ Ki·ªÉm tra package: {latest_package}")
    print()
    
    issues = []
    recommendations = []
    
    # 1. Ki·ªÉm tra c·∫•u tr√∫c th∆∞ m·ª•c
    print("1. KI·ªÇM TRA C·∫§U TR√öC TH·ª¶ M·ª§C:")
    required_structure = {
        'METS.xml': '‚úì METS g·ªëc',
        'metadata/descriptive/ead.xml': '‚úì EAD t·ªïng th·ªÉ',
        'metadata/preservation/premis.xml': '‚úì PREMIS',
        'representations/rep1/METS.xml': '‚úì METS rep1',
        'representations/rep1/data/': '‚úì PDF files',
        'representations/rep1/metadata/descriptive/': '‚úì EAD_doc files',
        'schemas/': '‚úì XSD files'
    }
    
    for path, desc in required_structure.items():
        full_path = os.path.join(package_path, path.replace('/', os.sep))
        if os.path.exists(full_path):
            print(f"   ‚úÖ {desc}: {path}")
        else:
            print(f"   ‚ùå {desc}: {path}")
            issues.append(f"Thi·∫øu {path}")
    
    print()
    
    # 2. Ki·ªÉm tra METS.xml g·ªëc
    print("2. KI·ªÇM TRA METS.XML G·ªêC:")
    mets_path = os.path.join(package_path, 'METS.xml')
    if os.path.exists(mets_path):
        try:
            tree = ET.parse(mets_path)
            root = tree.getroot()
            
            # Ki·ªÉm tra namespaces
            expected_ns = {
                'mets': 'http://www.loc.gov/METS/',
                'xlink': 'http://www.w3.org/1999/xlink',
                'xsi': 'http://www.w3.org/2001/XMLSchema-instance',
                'csip': 'https://DILCIS.eu/XML/METS/CSIPExtensionMETS'
            }
            
            print("   Namespaces:")
            for prefix, uri in expected_ns.items():
                if f"{{{uri}}}" in str(ET.tostring(root)):
                    print(f"   ‚úÖ {prefix}: {uri}")
                else:
                    print(f"   ‚ùå {prefix}: {uri}")
                    if prefix == 'csip':
                        issues.append("Thi·∫øu namespace csip (b·∫Øt bu·ªôc cho CSIP 1.2)")
            
            # Ki·ªÉm tra csip:OAISPACKAGETYPE
            oais_type = root.find('.//csip:OAISPACKAGETYPE', {'csip': expected_ns['csip']})
            if oais_type is not None and oais_type.text == 'AIP':
                print("   ‚úÖ csip:OAISPACKAGETYPE = AIP")
            else:
                print("   ‚ùå csip:OAISPACKAGETYPE = AIP")
                issues.append("Thi·∫øu ho·∫∑c sai csip:OAISPACKAGETYPE=AIP (b·∫Øt bu·ªôc)")
            
            # Ki·ªÉm tra OBJID format
            objid = root.get('OBJID', '')
            if objid.startswith('urn:uuid:') and len(objid.split(':')) == 3:
                print(f"   ‚úÖ OBJID format: {objid}")
            else:
                print(f"   ‚ùå OBJID format: {objid}")
                issues.append("OBJID ph·∫£i c√≥ format urn:uuid:<uuid>")
            
            # Ki·ªÉm tra CREATEDATE c√≥ m√∫i gi·ªù +07:00
            createdate = root.find('.//mets:metsHdr', {'mets': expected_ns['mets']})
            if createdate is not None:
                cd_attr = createdate.get('CREATEDATE', '')
                if '+07:00' in cd_attr or cd_attr.endswith('+07:00'):
                    print("   ‚úÖ CREATEDATE c√≥ m√∫i gi·ªù +07:00")
                else:
                    print(f"   ‚ùå CREATEDATE: {cd_attr}")
                    issues.append("CREATEDATE ph·∫£i c√≥ m√∫i gi·ªù +07:00 (ISO 8601)")
            
        except ET.ParseError as e:
            print(f"   ‚ùå METS.xml kh√¥ng h·ª£p l·ªá: {e}")
            issues.append("METS.xml c√≥ l·ªói XML syntax")
    
    print()
    
    # 3. Ki·ªÉm tra mdRef attributes
    print("3. KI·ªÇM TRA THU·ªòC T√çNH MDREF:")
    if os.path.exists(mets_path):
        try:
            tree = ET.parse(mets_path)
            root = tree.getroot()
            
            mdRefs = root.findall('.//mets:mdRef', {'mets': 'http://www.loc.gov/METS/'})
            
            required_attrs = ['ID', 'LOCTYPE', 'MDTYPE', 'MIMETYPE', 'CHECKSUMTYPE']
            recommended_attrs = ['SIZE', 'CREATED', 'CHECKSUM']
            
            for i, mdRef in enumerate(mdRefs, 1):
                print(f"   mdRef {i}:")
                for attr in required_attrs:
                    if mdRef.get(attr):
                        print(f"     ‚úÖ {attr}: {mdRef.get(attr)}")
                    else:
                        print(f"     ‚ùå {attr}: Thi·∫øu")
                        issues.append(f"mdRef thi·∫øu thu·ªôc t√≠nh b·∫Øt bu·ªôc {attr}")
                
                # Ki·ªÉm tra CHECKSUMTYPE = SHA-256
                if mdRef.get('CHECKSUMTYPE') != 'SHA-256':
                    print(f"     ‚ùå CHECKSUMTYPE ph·∫£i l√† SHA-256")
                    issues.append("CHECKSUMTYPE ph·∫£i l√† SHA-256")
                
                # Ki·ªÉm tra xlink:type v√† xlink:href
                if mdRef.get('{http://www.w3.org/1999/xlink}type') != 'simple':
                    print(f"     ‚ùå xlink:type ph·∫£i l√† 'simple'")
                    issues.append("xlink:type ph·∫£i l√† 'simple'")
                
                href = mdRef.get('HREF') or mdRef.get('{http://www.w3.org/1999/xlink}href')
                if href:
                    print(f"     ‚úÖ xlink:href: {href}")
                else:
                    print(f"     ‚ùå xlink:href: Thi·∫øu")
                    issues.append("mdRef thi·∫øu xlink:href")
        except:
            pass
    
    print()
    
    # 4. Ki·ªÉm tra structMap CSIP
    print("4. KI·ªÇM TRA STRUCTMAP CSIP:")
    if os.path.exists(mets_path):
        try:
            tree = ET.parse(mets_path)
            root = tree.getroot()
            
            structMap = root.find('.//mets:structMap[@LABEL="CSIP"]', {'mets': 'http://www.loc.gov/METS/'})
            if structMap is not None:
                print("   ‚úÖ structMap v·ªõi LABEL='CSIP'")
                
                # Ki·ªÉm tra c√°c div b·∫Øt bu·ªôc
                required_divs = ['Metadata', 'Schemas', 'Representations/rep1']
                for div_label in required_divs:
                    div_elem = root.find(f'.//mets:div[@LABEL="{div_label}"]', {'mets': 'http://www.loc.gov/METS/'})
                    if div_elem is not None:
                        print(f"   ‚úÖ div[@LABEL='{div_label}']")
                        
                        # Ki·ªÉm tra Metadata div c√≥ DMDID v√† ADMID
                        if div_label == 'Metadata':
                            if div_elem.get('DMDID'):
                                print("     ‚úÖ DMDID c√≥ gi√° tr·ªã")
                            else:
                                print("     ‚ùå DMDID thi·∫øu")
                                issues.append("div[@LABEL='Metadata'] thi·∫øu DMDID")
                            
                            if div_elem.get('ADMID'):
                                print("     ‚úÖ ADMID c√≥ gi√° tr·ªã") 
                            else:
                                print("     ‚ùå ADMID thi·∫øu")
                                issues.append("div[@LABEL='Metadata'] thi·∫øu ADMID")
                    else:
                        print(f"   ‚ùå div[@LABEL='{div_label}']")
                        issues.append(f"Thi·∫øu div[@LABEL='{div_label}'] trong structMap")
            else:
                print("   ‚ùå structMap v·ªõi LABEL='CSIP'")
                issues.append("Thi·∫øu structMap[@LABEL='CSIP']")
        except:
            pass
    
    print()
    
    # 5. Ki·ªÉm tra rep1/METS.xml
    print("5. KI·ªÇM TRA REP1/METS.XML:")
    rep1_mets = os.path.join(package_path, 'representations', 'rep1', 'METS.xml')
    if os.path.exists(rep1_mets):
        try:
            tree = ET.parse(rep1_mets)
            root = tree.getroot()
            
            # Ki·ªÉm tra csip:OAISPACKAGETYPE
            oais_type = root.find('.//csip:OAISPACKAGETYPE', {'csip': 'https://DILCIS.eu/XML/METS/CSIPExtensionMETS'})
            if oais_type is not None and oais_type.text == 'AIP':
                print("   ‚úÖ csip:OAISPACKAGETYPE = AIP")
            else:
                print("   ‚ùå csip:OAISPACKAGETYPE = AIP")
                issues.append("rep1/METS.xml thi·∫øu csip:OAISPACKAGETYPE=AIP")
            
            # Ki·ªÉm tra structMap c√≥ c√°c div b·∫Øt bu·ªôc
            required_rep1_divs = ['Data', 'MetadataLink']
            for div_label in required_rep1_divs:
                div_elem = root.find(f'.//mets:div[@LABEL="{div_label}"]', {'mets': 'http://www.loc.gov/METS/'})
                if div_elem is not None:
                    print(f"   ‚úÖ div[@LABEL='{div_label}']")
                else:
                    print(f"   ‚ùå div[@LABEL='{div_label}']")
                    issues.append(f"rep1/METS.xml thi·∫øu div[@LABEL='{div_label}']")
            
            # Ki·ªÉm tra MetadataLink/File c√≥ UUID format v√† DMDID
            metalink_files = root.findall('.//mets:div[@LABEL="MetadataLink/File"]', {'mets': 'http://www.loc.gov/METS/'})
            print(f"   T√¨m th·∫•y {len(metalink_files)} MetadataLink/File")
            for i, ml_file in enumerate(metalink_files, 1):
                file_id = ml_file.get('ID', '')
                if file_id.startswith('uuid-') and len(file_id) > 10:
                    print(f"     ‚úÖ File {i} ID format: {file_id}")
                else:
                    print(f"     ‚ùå File {i} ID format: {file_id}")
                    issues.append(f"MetadataLink/File {i} ID ph·∫£i theo format uuid-{{UUIDS}}")
                
                if ml_file.get('DMDID'):
                    print(f"     ‚úÖ File {i} c√≥ DMDID")
                else:
                    print(f"     ‚ùå File {i} thi·∫øu DMDID")
                    issues.append(f"MetadataLink/File {i} thi·∫øu DMDID")
            
        except ET.ParseError as e:
            print(f"   ‚ùå rep1/METS.xml kh√¥ng h·ª£p l·ªá: {e}")
            issues.append("rep1/METS.xml c√≥ l·ªói XML syntax")
    else:
        print("   ‚ùå rep1/METS.xml kh√¥ng t·ªìn t·∫°i")
        issues.append("Thi·∫øu rep1/METS.xml")
    
    print()
    
    # 6. Ki·ªÉm tra EAD_doc files
    print("6. KI·ªÇM TRA EAD_DOC FILES:")
    ead_doc_path = os.path.join(package_path, 'representations', 'rep1', 'metadata', 'descriptive')
    if os.path.exists(ead_doc_path):
        ead_files = [f for f in os.listdir(ead_doc_path) if f.startswith('EAD_doc_')]
        print(f"   T√¨m th·∫•y {len(ead_files)} EAD_doc files")
        
        # Ki·ªÉm tra ƒë·∫∑t t√™n file
        for ead_file in ead_files[:3]:  # Ch·ªâ ki·ªÉm tra 3 file ƒë·∫ßu
            if ead_file.startswith('EAD_doc_file-') and ead_file.endswith('.xml'):
                print(f"   ‚úÖ Format t√™n file: {ead_file}")
            else:
                print(f"   ‚ùå Format t√™n file: {ead_file}")
                issues.append(f"EAD_doc file {ead_file} kh√¥ng ƒë√∫ng format EAD_doc_file-N.xml")
    else:
        print("   ‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c EAD_doc")
        issues.append("Thi·∫øu th∆∞ m·ª•c representations/rep1/metadata/descriptive/")
    
    print()
    
    # 7. T·ªïng k·∫øt
    print("=" * 70)
    print("üìä T·ªîNG K·∫æT KI·ªÇM TRA:")
    print()
    
    if not issues:
        print("üéâ HO√ÄN H·∫¢O! Kh√¥ng c√≥ v·∫•n ƒë·ªÅ n√†o ƒë∆∞·ª£c ph√°t hi·ªán.")
    else:
        print(f"‚ùå Ph√°t hi·ªán {len(issues)} v·∫•n ƒë·ªÅ c·∫ßn kh·∫Øc ph·ª•c:")
        print()
        for i, issue in enumerate(issues, 1):
            print(f"   {i}. {issue}")
    
    print()
    
    # 8. Khuy·∫øn ngh·ªã
    print("üí° KHUY·∫æN NGH·ªä KH·∫ÆC PH·ª§C:")
    print()
    
    priority_fixes = [
        "1. B·ªï sung csip:OAISPACKAGETYPE=AIP cho c·∫£ METS g·ªëc v√† rep1/METS.xml",
        "2. ƒê·∫£m b·∫£o t·∫•t c·∫£ mdRef c√≥ ƒë·∫ßy ƒë·ªß thu·ªôc t√≠nh b·∫Øt bu·ªôc (ID, LOCTYPE, MDTYPE, MIMETYPE, CHECKSUMTYPE, xlink:type, xlink:href)",
        "3. S·ª≠ d·ª•ng CHECKSUMTYPE='SHA-256' th·ªëng nh·∫•t thay v√¨ MD5", 
        "4. Th√™m m√∫i gi·ªù +07:00 v√†o t·∫•t c·∫£ timestamps",
        "5. ƒê·∫£m b·∫£o structMap c√≥ ƒë√∫ng c·∫•u tr√∫c CSIP v·ªõi c√°c div b·∫Øt bu·ªôc",
        "6. rep1/METS.xml ph·∫£i c√≥ div MetadataLink v·ªõi ID format uuid-{UUIDS}"
    ]
    
    for fix in priority_fixes:
        print(f"   {fix}")
    
    print()
    print("=" * 70)

if __name__ == "__main__":
    analyze_package_structure()
